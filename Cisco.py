#Programa realizado por Erik Jesús Romellón Lorenzana

#getpass para ocultar contraseña en modo ventana terminal (no funciona en ejecucion desde pycharm)
#se usa de la sig forma
#password = getpass("Ingrese el password: ")
from getpass import getpass
import paramiko
from time import gmtime, strftime, sleep
import os, re

#Variables
global ip
global usuario
global password
global vlans_str
vlans=[]
comillas='"'

ip = input("Ingrese la IP del dispositivo: ")
usuario = input("Ingrese nombre de usuario: ")
password = input("Ingrese el password: ")

#conexion por SSH
cliente = paramiko.SSHClient()
cliente.set_missing_host_key_policy(paramiko.AutoAddPolicy())
cliente.connect(hostname=ip, port=22, username=usuario, password=password)
devices_access = cliente.invoke_shell()
print("Conectado!!!\n\n")
sleep(1)
os.system ("cls")
##########################################################

#inicio configuración
devices_access.send("conf t\n")
sleep(1)
hn = input("Ingresa el hostname: ")
devices_access.send("hostname "+hn+"\n")
sleep(1)
anio = strftime("%Y", gmtime())
devices_access.send("username admin privilege 15 password cisco"+anio+"\n")
sleep(1)
devices_access.send("username telecom privilege 7 password password"+anio+"\n")
sleep(1)
devices_access.send("enable password password" +anio+"\n")
print("--------------------------------------------------------------------------")
os.system ("cls")

#Creacion de vlans
print("Configuracion de vlans \n\n")
numVlans = input("Ingresa el numero total de vlans: ")
numVlans = int(numVlans)

for i in range(numVlans):
    vi = input(f"Ingresa numero de vlan { i +1 }: ")
    vi = int(vi)
    vlans.append(vi)
    vi = str(vi)
    vlans_str = str(vlans)[1:-1]
vlans_str = re.sub(r"\s+", "", vlans_str)
print("--------------------------------------------------------------------------")
#Nombre de vlans y database
devices_access.send("vlan database "+vlans_str+"\n")
sleep(1)
print(vlans_str)

for i in vlans:
    i = str(i)
    name = input("Ingresa nombre de la vlan "+i+": ")
    devices_access.send("interface vlan "+i+"\n")
    sleep(1)
    devices_access.send("name "+name+"\n")
    sleep(1)
    devices_access.send("exit\n")
    sleep(1)
print("--------------------------------------------------------------------------")
os.system ("cls")

#Asignaccion de puertos
print("   Configuracion de puertos :D   ")
while True:
    try:
        datos = input("Cuantos puertos de datos son?: ")
        datos = int(datos)
        camaras = input("Cuantos puertos de camaras son?: ")
        camaras = int(camaras)
        aps = input("Cuantos puertos de aps son?: ")
        aps = int(aps)
        trunks = input("Cuantos puertos troncales son?: ")
        trunks = int(trunks)
    except ValueError:
        print("\nERROR, INTROUCE UNICAMENTE VALORES NUMERICOS")
        print("***********************************************\n")
    else:
        break

sum = datos+camaras+aps+trunks
sum=str(sum)
print("Se van a configurar "+sum+" puertos")

#Configuracion puertos de datos
if(datos > 1):
    ranA = input("Define el rango de los puertos de datos Ej.(gi1/0/1-15): ")
    vlnDatos = input("Define la vlan de datos: ")
    vlnVoip = input("Define la vlan de Voip: ")
    devices_access.send("interface range "+ranA+"\n")
    sleep(1)
    devices_access.send("storm-control broadcast level 5\n")
    sleep(1)
    devices_access.send("storm-control multicast level 5\n")
    sleep(1)
    devices_access.send("port security max 6\n")
    sleep(1)
    devices_access.send("port security mode max-addresses\n")
    sleep(1)
    devices_access.send("port security discard-shutdown\n")
    sleep(1)
    devices_access.send("spanning-tree disable\n")
    sleep(1)
    devices_access.send("spanning-tree portfast\n")
    sleep(1)
    devices_access.send("switchport mode general\n")
    sleep(1)
    devices_access.send("switchport general allowed vlan add " +vlnVoip+" tagged\n")
    sleep(1)
    devices_access.send("switchport general allowed vlan add " + vlnDatos + " untagged\n")
    sleep(1)
    devices_access.send("switchport general pvid " +vlnDatos+"\n")
    sleep(1)
    devices_access.send("exit\n")
    sleep(1)
elif(datos==1):
    puerto = input("Define el puerto de datos Ej. (gi1/0/5): ")
    vlnDatos = input("Define la vlan de datos: ")
    vlnVoip = input("Define la vlan de Voip: ")
    devices_access.send("interface "+puerto+"\n")
    sleep(1)
    devices_access.send("storm-control broadcast level 5\n")
    sleep(1)
    devices_access.send("storm-control multicast level 5\n")
    sleep(1)
    devices_access.send("port security max 6\n")
    sleep(1)
    devices_access.send("port security mode max-addresses\n")
    sleep(1)
    devices_access.send("port security discard-shutdown\n")
    sleep(1)
    devices_access.send("spanning-tree disable\n")
    sleep(1)
    devices_access.send("spanning-tree portfast\n")
    sleep(1)
    devices_access.send("switchport mode general\n")
    sleep(1)
    devices_access.send("switchport general allowed vlan add " +vlnVoip+" tagged\n")
    sleep(1)
    devices_access.send("switchport general allowed vlan add " + vlnDatos + " untagged\n")
    sleep(1)
    devices_access.send("switchport general pvid " +vlnDatos+"\n")
    sleep(1)
    devices_access.send("exit\n")
    sleep(1)
else:
    print("No se van a configurar puertos de datos")

#Configuracion puertos de camaras
if(camaras > 1):
    ranA = input("Define el rango de los puertos de camaras Ej.(gi1/0/16-22): ")
    vlnCams = input("Define la vlan de camaras: ")
    devices_access.send("interface range "+ranA+"\n")
    sleep(1)
    devices_access.send("storm-control broadcast level 5\n")
    sleep(1)
    devices_access.send("storm-control multicast level 5\n")
    sleep(1)
    devices_access.send("spanning-tree disable\n")
    sleep(1)
    devices_access.send("switchport mode access\n")
    sleep(1)
    devices_access.send("switchport access vlan " +vlnCams+"\n")
    sleep(1)
    devices_access.send("port security max 1\n")
    sleep(1)
    devices_access.send("port security mode max-addresses\n")
    sleep(1)
    devices_access.send("port security discard-shutdown\n")
    sleep(1)
    devices_access.send("exit\n")
    sleep(1)
elif(camaras==1):
    puerto = input("Define el puerto camaras Ej. (gi1/0/5): ")
    vlnCams = input("Define la vlan de camaras: ")
    devices_access.send("interface "+puerto+"\n")
    sleep(1)
    devices_access.send("storm-control broadcast level 5\n")
    sleep(1)
    devices_access.send("storm-control multicast level 5\n")
    sleep(1)
    devices_access.send("spanning-tree disable\n")
    sleep(1)
    devices_access.send("switchport mode access\n")
    sleep(1)
    devices_access.send("switchport access vlan " +vlnCams+"\n")
    sleep(1)
    devices_access.send("port security max 1\n")
    sleep(1)
    devices_access.send("port security mode max-addresses\n")
    sleep(1)
    devices_access.send("port security discard-shutdown\n")
    sleep(1)
    devices_access.send("exit\n")
    sleep(1)
else:
    print("No se van a configurar puertos de camaras")
    

#Configuracion puertos de accessPoint
if(aps > 1):
    nm = "aps"
    ranA = input("Define el rango de los puertos de APs Ej.(gi1/0/22-43): ")
    vlnSiu = []
    devices_access.send("interface range "+ranA+"\n")
    sleep(1)
    devices_access.send("storm-control broadcast level 30\n")
    sleep(1)
    devices_access.send("storm-control multicast level 30\n")
    sleep(1)
    devices_access.send("spanning-tree disable\n")
    sleep(1)
    devices_access.send("spanning-tree portfast\n")
    sleep(1)
    devices_access.send("switchport mode general\n")
    sleep(1)
    numSiu = input("Define numero total de vlans de SIU para los aps: ")
    numSiu = int(numSiu)
    for i in range(numSiu):
        siu = input(f"Ingresa numero de vlan { i +1}: ")
        siu = int(siu)
        vlnSiu.append(siu)
        siu = str(siu)
        siu_str = str(vlnSiu)[1:-1]
    devices_access.send("switchport general allowed vlan add " +siu_str+" tagged\n")
    sleep(1)
    vlnAdmAps = input("Define la vlan de adm de aps: ")
    devices_access.send("switchport general allowed vlan add " +vlnAdmAps+" untagged\n")
    sleep(1)
    devices_access.send("switchport general pvid " +vlnAdmAps+"\n")
    sleep(1)
    devices_access.send("exit\n")
    sleep(1)
elif(aps==1):
    puerto = input("Define el puerto APs Ej. (gi1/0/5): ")
    vlnSiu = []
    devices_access.send("interface "+puerto+"\n")
    sleep(1)
    devices_access.send("storm-control broadcast level 30\n")
    sleep(1)
    devices_access.send("storm-control multicast level 30\n")
    sleep(1)
    devices_access.send("spanning-tree disable\n")
    sleep(1)
    devices_access.send("spanning-tree portfast\n")
    sleep(1)
    devices_access.send("switchport mode general\n")
    sleep(1)
    numSiu = input("Define numero total de vlans para los aps: ")
    numSiu = int(numSiu)
    for i in range(numSiu):
        siu = input(f"Ingresa numero de vlan { i +1}: ")
        siu = int(siu)
        vlnSiu.append(siu)
        siu = str(siu)
        siu_str = str(vlnSiu)[1:-1]
    devices_access.send("switchport general allowed vlan add " +siu_str+" tagged\n")
    sleep(1)
    vlnAdmAps = input("Define la vlan de adm de aps: ")
    devices_access.send("switchport general allowed vlan add " +vlnAdmAps+" untagged\n")
    sleep(1)
    devices_access.send("switchport general pvid " +vlnAdmAps+"\n")
    sleep(1)
    devices_access.send("exit\n")
    sleep(1)
else:
    print("No se van a configurar puertos de APs")

#Configuracion puertos troncales
if(trunks > 1):
    nm = "toncales"
    ranA = input("Define el rango de los puertos troncales Ej.(gi1/0/44-48): ")
    native = input("Numero de la vlan nativa: ")
    devices_access.send("interface range "+ranA+"\n")
    sleep(1)
    devices_access.send("spanning-tree disable\n")
    sleep(1)
    devices_access.send("no spanning-tree portfast\n")
    sleep(1)
    devices_access.send("switchport mode trunk\n")
    sleep(1)
    devices_access.send("switchport trunk allowed vlan add " +vlans_str+"\n")
    sleep(1)
    devices_access.send("switchport trunk native vlan " +native+"\n")
    sleep(1)
    devices_access.send("exit\n")
    sleep(1)
    print("--------------------------------------------------------------------------")
    te = input("Puertos troncales tenGiga?: si/no")
    te = te.upper()
    if(te == "SI"):
        ranA = input("Define el rango de los puertos troncales Ej.(te1/0/1-4): ")
        devices_access.send("interface range "+ranA+"\n")
        sleep(1)
        devices_access.send("spanning-tree disable\n")
        sleep(1)
        devices_access.send("no spanning-tree portfast\n")
        sleep(1)
        devices_access.send("switchport mode trunk\n")
        sleep(1)
        devices_access.send("switchport trunk allowed vlan add " +vlans_str+"\n")
        sleep(1)
        devices_access.send("switchport trunk native vlan " +native+"\n")
        sleep(1)
        devices_access.send("exit\n")
        sleep(1)
        print("--------------------------------------------------------------------------")
elif(trunks==1):
    puerto = input("Define el puerto troncal Ej. (gi1/0/5): ")
    devices_access.send("interface "+puerto+"\n")
    sleep(1)
    devices_access.send("switchport mode trunk\n")
    sleep(1)
    devices_access.send("switchport trunk allowed vlan add " +vlans_str+"\n")
    sleep(1)
    devices_access.send("spanning-tree disable\n")
    sleep(1)
    devices_access.send("no spanning-tree portfast\n")
    sleep(1)
    devices_access.send("exit\n")
    sleep(1)
else:
    print("No se van a configurar puertos de troncales")
print("-------------------------------------------------------------------------------------------------")

os.system ("cls")
#comunidades
print("Configuracion de SNMP\n\n")
devices_access.send("snmp-server server\n")
sleep(1)
devices_access.send("snmp-server view CommunityView system included\n")
sleep(1)
devices_access.send("snmp-server view CommunityView interfaces included\n")
sleep(1)
devices_access.send("snmp-server view CommunityView snmp included\n")
sleep(1)
devices_access.send("snmp-server community M0n|Tmx%9u# ro view CommunityView\n")
sleep(1)
devices_access.send("snmp-server community &R1$U@dY=Tw8! rw view CommunityView\n")
sleep(1)
#Cambiar ip
devices_access.send("snmp-server host ip.ip.ip.ip traps version 2c M0n|Tmx%9u#\n")
sleep(1)
#Cambiar ip
devices_access.send("snmp-server host ip.ip.ip.ip traps version 2c M0n|Tmx%9u#\n")
sleep(1)
devices_access.send("snmp-server group C@tI-ADm0n v3 priv read CommunityView write M0n|Tmx%9u#\n")
sleep(1)
devices_access.send("snmp-server group SoporT3leC0m v3 auth read M0n|Tmx%9u#\n")
sleep(1)
devices_access.send("snmp-server contact NOC-RIUADY_9237428\n")
sleep(1)
lugar = input("Ingresa dependecia (DER,FCA,CAC, etc.): ")
lugar_uper = lugar.upper()
total = comillas+lugar_uper+comillas
devices_access.send("snmp-server location " +total+"\n")
sleep(1)
#Cambiar ip
devices_access.send("snmp-server host ip.ip.ip.ip version 2c M0n|Tmx%9u#\n")
sleep(1)
#Cambiar ip
devices_access.send("snmp-server host ip.ip.ip.ip version 3 priv M0n|Tmx%9u#\n")
sleep(1)
devices_access.send("snmp-server trap authentication\n")
sleep(1)
devices_access.send("end\n")
sleep(1)
devices_access.send("configure t\n")
sleep(1)
devices_access.send("clock timezone MEX -6\n")
sleep(1)
devices_access.send("clock source sntp\n")
sleep(1)
devices_access.send("sntp unicast client enable\n")
sleep(1)
#Cambiar ip
devices_access.send("sntp server ip.ip.ip.ip\n")
sleep(1)
#Cambiar ip
devices_access.send("sntp server ip.ip.ip.ip\n")
sleep(1)


print("--------------------------------------------------------------------------")
os.system ("cls")

#servicios
print("Configurando servicios\n\n")
devices_access.send("ip telnet server\n")
sleep(1)
devices_access.send("no lldp run\n")
sleep(1)
devices_access.send("no lldp med network-policy voice auto\n")
sleep(1)
devices_access.send("no ip http server\n")
sleep(1)
devices_access.send("no ip dhcp server\n")
sleep(1)
devices_access.send("no ip domain lookup\n")
sleep(1)
devices_access.send("no cdp run\n")
sleep(1)
devices_access.send("bonjour interface range vlan 1\n")
sleep(1)
devices_access.send("ip http secure-server\n")
sleep(1)
devices_access.send("macro auto disabled\n")
sleep(1)
devices_access.send("no macro auto processing cdp\n")
sleep(1)
devices_access.send("no macro auto processing lldp\n")
sleep(1)
devices_access.send("macro auto processing type host disabled\n")
sleep(1)
devices_access.send("macro auto processing type ip_phone disabled\n")
sleep(1)
devices_access.send("macro auto processing type ip_phone_desktop disabled\n")
sleep(1)
devices_access.send("macro auto processing type switch disabled\n")
sleep(1)
devices_access.send("macro auto processing type ap disabled\n")
sleep(1)
print("--------------------------------------------------------------------------")


print("Configuracion finalizada con exito :D")
print("--------------------------------------------------------------------------")
sleep(1)

devices_access.send("end\n")
sleep(1)
devices_access.send("wr\n")
sleep(1)
devices_access.send("y")
sleep(5)
devices_access.send("\n")
output = devices_access.recv(32767).decode("utf-8")
print("\nConfiguracion aplicada: ")
print(output)
enter = input("\nEnter para cerrar el programa")
j=5
while (j>0):
    j=str(j)
    print("Cerrando en "+j)
    sleep(1)
    j=int(j)
    j=j-1

cliente.close()
#Fin de configuracion